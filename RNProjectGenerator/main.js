
'use strict';
const yeoman = require('yeoman-environment');
const path = require('path');
const TerminalAdapter = require('yeoman-environment/lib/adapter.js');
const fs = require('fs');
const semver = require('semver');

class CreateSuppressingTerminalAdapter extends TerminalAdapter {
  constructor() {
    super();
    // suppress 'create' output generated by yeoman
    this.log.create = function() {};
  }
}

function init(projDir, argsOrName) {
  console.log("initiating project" , projDir);
  const env = yeoman.createEnv(
    undefined,
    undefined,
    new CreateSuppressingTerminalAdapter()
  );
  env.register(
    require.resolve(path.join(__dirname, 'generator')),
    'react:app'
  );
  const args = Array.isArray(argsOrName)
    ? argsOrName
    : [argsOrName].concat(process.argv.slice(4));
  const generator = env.create('react:app', {args: args});
  generator.destinationRoot(projDir);
  generator.run();
  installReactNative(argsOrName);
}

function installReactNative(projName) {
  var root = path.resolve(projName);
  const packageJson = {
    name: projName,
    version: '0.0.1',
    private: 'true',
    scripts: {
      start: 'node node_modules/react-native/local-cli/cli.js start'
    }
  };
  fs.writeFileSync(path.join(process.cwd(), 'package.json'), JSON.stringify(packageJson));
}

function getInstallPackage(rnPackage) {
  var packageToInstall = 'react-native';
  var valideSemver = semver.valid(rnPackage);
  if (valideSemver) {
    packageToInstall += '@' + valideSemver;
  } else if (rnPackage) {
    // for tar.gz or alternative paths
    packageToInstall = rnPackage;
  }
  return packageToInstall;
}

function run(root, projectName, rnPackage) {
  exec('npm install --save --save-exact ' + getInstallPackage(rnPackage), function(e, stdout, stderr) {
    if (e) {
      console.log(stdout);
      console.error(stderr);
      console.error('`npm install --save --save-exact react-native` failed');
      process.exit(1);
    }
  });
}


init(process.cwd() , process.argv[2]);
